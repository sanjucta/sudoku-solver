{"version":3,"sources":["components/editable-square/editable-square.component.jsx","services/solution-service.js","components/puzzle/puzzle.component.jsx","App.js","serviceWorker.js","index.js"],"names":["EditableSquare","props","state","editing","inputElem","this","focus","className","type","min","max","ref","input","onChange","event","updateValue","target","value","onBlur","setState","onClick","Component","solve","board","setResult","i","j","boardStack","valStack","posStack","fill","startVal","isDone","num","tryVal","console","log","pop","position","setTimeout","boardCopy","obj","JSON","parse","stringify","push","row","col","includes","matrix","n","map","block","rowStart","Math","floor","colStart","getBlock","Puzzle","cloneDeep","val","parseInt","prevState","newBoard","entryErr","msg","working","solved","forEach","solution","rowind","key","colind","bind","solvePuzzle","reset","id","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5d37cb6.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport './editable-square.styles.css';\r\n\r\nclass EditableSquare extends Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            editing:false,\r\n            inputElem : null // The actual DOM element for the input field \r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate()\r\n    {\r\n        //Set the focus inside the input element when the user clicks on the div\r\n        if(this.state.inputElem)\r\n        {\r\n            this.state.inputElem.focus();\r\n        }\r\n        \r\n    }\r\n\r\n  \r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"grid-square\">\r\n                {\r\n                   this.state.editing ? \r\n                   <div>\r\n                       <input type=\"number\" min=\"1\" max=\"9\" \r\n                         ref={(input)=>{this.state.inputElem=input}}  \r\n                         onChange={(event)=>{this.props.updateValue(event.target.value)}} \r\n                         onBlur={()=>{this.setState({editing:false})}}\r\n                         >\r\n                       </input>\r\n                   </div>\r\n                    :\r\n                    <div  onClick={()=>{this.setState({editing:true});}} >{this.props.value}</div>\r\n                }        \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default EditableSquare;\r\n","/**\r\n * Solve a Sudoku puzzle\r\n * @param  {Number[][]} board A 2 dimensional array representing the Sudoku puzzle\r\n * @param  {Function} setResult A function to return the result. This being a function that calls itself asynchronously we cannot simply return the result.\r\n * \r\n */\r\nexport function solve(board,setResult)\r\n  {\r\n  /* Starting from the first available free position, we try to insert values between 1 and 9 systematically \r\n     in each position. If we fail to insert a suitable value in any position, we backtrack to the previous cell \r\n     filled and try to fill it with the next viable value.  \r\n  */\r\n  var i = 0;\r\n  var j = 0;\r\n  const boardStack = [];                 \r\n  const valStack = []; \r\n  const posStack = [];   \r\n\r\n  fill(board,1); \r\n\r\n  function fill(board,startVal)\r\n  {\r\n  \r\n    if(isDone(board))\r\n    {\r\n      //console.log('We have a solution');\r\n      setResult(board);\r\n      return;\r\n    }\r\n    if(i<9)\r\n    {\r\n      if(j<9)\r\n      {\r\n        while(board[i][j]!==0)\r\n        {\r\n          if(j<8)\r\n          {\r\n            j++;\r\n          }else\r\n          {\r\n            if(i<8)\r\n            {\r\n              j=0;\r\n              i++;\r\n   \r\n            }\r\n          } \r\n        }\r\n    //At this point we have a square where we need to insert a value;\r\n    //console.log(`Here i,j : [${i},${j}]`);\r\n    let num = startVal;\r\n    //console.log(`Here startVal : [${startVal}]`);\r\n    while(( num < 10 ) && (tryVal(board,i,j,num)===false))\r\n    {\r\n      num++;\r\n    }\r\n    //console.log(`Here num : [${num}]`);\r\n    if(num === 10)\r\n    {\r\n      // This means we are unable to find any viable number to insert into this position which means \r\n      // values inserted in previous positions must be incorrect. So we backtrack to the previous sqaure filled\r\n      // and try with the next viable value at that position \r\n      console.log(`Reset [${i}][${j}] `);\r\n      //console.log(board);\r\n      board = boardStack.pop();\r\n      //console.log('Board after popping');\r\n      //console.log(board);\r\n      const startVal = valStack.pop()+1;\r\n      const position = posStack.pop();\r\n      i = position.i;\r\n      j = position.j;\r\n      // We use setTimeout because this is a long operation and we need to allow the call stack to be empty so that the browser can respond to events\r\n      setTimeout(()=>{\r\n        fill(board,startVal)\r\n      },0);\r\n      return;\r\n    }\r\n      \r\n      //console.log(`board[${i}][${j}] is ${num}`);\r\n      var boardCopy = copyObj(board);\r\n      boardStack.push(boardCopy);\r\n      valStack.push(num);\r\n      posStack.push({i:i,j:j});\r\n      board[i][j] = num;\r\n      \r\n      setTimeout(()=>{\r\n           fill(board,1);          \r\n        },0);\r\n          \r\n        \r\n      return;\r\n      \r\n    }\r\n  }\r\n}\r\n}\r\n\r\n/**\r\n * Check if num can be inserted into the board at position [row,col]\r\n * @param  {Number} board A 2 dimensional array representing the Sudoku puzzle\r\n * @param  {Number} row \r\n * @param  {Number} col\r\n * @param  {Number} num The number we are trying to insert\r\n */\r\nexport function tryVal(board,row,col,num)\r\n{\r\n  if(board[row].includes(num))\r\n  {\r\n    return false;\r\n  } \r\n  if(getNthColumn(board,col).includes(num))\r\n  {\r\n    return false;\r\n  }\r\n  if(getBlock(board,row,col).includes(num))\r\n  {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction getNthColumn(matrix,n)\r\n{\r\n  return matrix.map((row)=>row[n]);\r\n}\r\n\r\nfunction getBlock(matrix,row,col)\r\n{\r\n  let block = [];\r\n  let rowStart = Math.floor(row/3) * 3;\r\n  let colStart = Math.floor(col/3) * 3;\r\n\r\n  for(let i = rowStart; i < rowStart +3 ;i++ )\r\n  {\r\n    \r\n    for(let j = colStart; j < colStart +3 ; j++ )\r\n    {\r\n      block.push(matrix[i][j]);\r\n    }\r\n    \r\n  }\r\n\r\n  return block;\r\n\r\n}\r\n\r\nfunction isDone(board)\r\n{\r\n  for(let i=0;i<9;i++)\r\n  {\r\n    for(let j=0;j<9;j++)\r\n    {\r\n      if(board[i][j]===0)\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction copyObj(obj)\r\n{\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport EditableSquare from '../editable-square/editable-square.component';\r\nimport './puzzle.styles.css';\r\nimport {solve,tryVal} from  '../../services/solution-service';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\n\r\nclass Puzzle extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            board : [\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0],\r\n                [0,0,0,0,0,0,0,0,0]\r\n            ] ,\r\n\r\n            msg : 'Any number can only appear once in any row, column or grid',\r\n            entryErr : false,\r\n            working : false,\r\n            solved : false\r\n        }\r\n    }\r\n \r\n    reset()\r\n    {\r\n        const newBoard = [...this.state.board];//shallow copy\r\n        \r\n        newBoard.forEach(row => {\r\n            row.fill(0);\r\n        });\r\n        this.setState({board:newBoard,solved:false}) // forcing refresh\r\n    }\r\n\r\n    solvePuzzle()\r\n    {\r\n        this.setState(\r\n            {working:true,\r\n            solved:false});\r\n        solve(this.state.board,(solution)=>{\r\n            this.setState({\r\n                board:solution,\r\n                solved:true,\r\n                working:false})\r\n        });\r\n        \r\n    }\r\n\r\n    updateValue = (row,col,value) =>{\r\n\r\n        const boardCopy = cloneDeep(this.state.board);\r\n        const val = parseInt(value);\r\n                  \r\n        if((val===0)||tryVal(boardCopy,row,col,val))\r\n        {\r\n            \r\n            this.setState((prevState)=>{\r\n              const newBoard = [...prevState.board];\r\n              newBoard[row][col] = val;\r\n              return{\r\n                 board : newBoard,\r\n                 entryErr : false\r\n             }\r\n           });\r\n        }else{\r\n            this.setState({entryErr:true});\r\n        }\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        return( \r\n            <div>\r\n            <div className={this.state.working?\"working\":null} >\r\n                <div className={this.state.solved?\"grid solved\":\"grid\"} >\r\n                  {\r\n                    this.state.board.map((row,rowind)=>{\r\n\r\n                        return (\r\n                            <div key ={`${rowind}`} className=\"wrapper\">\r\n                            {row.map((val,colind)=>{\r\n                                    return <EditableSquare key ={`${rowind}-${colind}`} value={val}\r\n                                     updateValue={this.updateValue.bind(this,rowind,colind)}\r\n                                     \r\n                                     />\r\n                                }) }\r\n                            </div>    \r\n                        )               \r\n                                                        \r\n                    })\r\n                  }\r\n                </div>\r\n                <div className=\"action-buttons\">\r\n                    <button onClick={()=>this.solvePuzzle()}>Solve</button>\r\n                    <button onClick={()=>this.reset()}>Reset</button>\r\n                </div>\r\n                <div className=\"error\">\r\n                    {this.state.entryErr?this.state.msg:''}\r\n                </div>\r\n                \r\n            </div>\r\n            {\r\n                this.state.working ? <div id=\"loader\"></div> : null\r\n            }\r\n            </div>         \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Puzzle;","import React from 'react';\nimport './App.css';\nimport Puzzle from './components/puzzle/puzzle.component.jsx';\n\n\nclass App extends React.Component {\n\n  render()\n  {\n    return (\n      \n      <div className=\"App\">\n        <h1>Sudoku Solver</h1>\n        <p>Create your own puzzle and press 'Solve'</p>\n        <Puzzle />               \n      </div>  \n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}